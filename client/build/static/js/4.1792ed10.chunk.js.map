{"version":3,"sources":["img/CodeLink_Guest_Icon.png","components/forms/PostForm.jsx","components/post/PostItem.jsx","components/layout/Discussion.jsx","utils/formatDate.js","actions/post.js"],"names":["module","exports","linkPlugin","createLinkPlugin","inlineToolbarPlugin","createInlineToolbarPlugin","InlineToolbar","plugins","PostForm","props","selected","postId","dispatch","useDispatch","useState","EditorState","createEmpty","editorState","setEditorState","className","onSubmit","event","text","JSON","stringify","convertToRaw","getCurrentContent","createComment","createPost","preventDefault","onChange","state","placeholder","externalProps","LinkButton","type","value","PostItem","comment","post","_id","name","avatar","user","likes","comments","date","convertedText","stateToHTML","convertFromRaw","parse","auth","useSelector","some","userLiked","setUserLiked","to","length","src","alt","guestIcon","formatDate","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","onClick","likePost","loading","deleteComment","deletePost","Post","id","match","params","useEffect","getPost","window","history","back","map","key","day","intl","Intl","DateTimeFormat","month","format","Date","a","api","get","res","GET_POST","payload","data","POST_ERROR","msg","response","statusText","status","getAllPosts","GET_POSTS","put","UPDATE_LIKES","formData","console","log","ADD_COMMENT","setAlert","commentId","delete","DELETE_COMMENT","ADD_POST","DELETE_POST","errors","forEach","error"],"mappings":"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","file":"static/js/4.1792ed10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CodeLink_Guest_Icon.1e473997.png\";","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { convertToRaw, EditorState } from \"draft-js\";\r\nimport Editor from \"@draft-js-plugins/editor\";\r\nimport createLinkPlugin from '@draft-js-plugins/anchor';\r\nimport createInlineToolbarPlugin from '@draft-js-plugins/inline-toolbar';\r\nimport {\r\n  ItalicButton,\r\n  BoldButton,\r\n  UnderlineButton,\r\n} from '@draft-js-plugins/buttons';\r\nimport '@draft-js-plugins/inline-toolbar/lib/plugin.css';\r\nimport \"@draft-js-plugins/anchor/lib/plugin.css\";\r\n// LOCAL\r\nimport { createComment, createPost } from \"../../actions/post\";\r\nimport { Fragment } from \"react\";\r\n\r\n\r\n//  Editor Plugin Setup\r\nconst linkPlugin = createLinkPlugin();\r\nconst inlineToolbarPlugin = createInlineToolbarPlugin();\r\nconst { InlineToolbar } = inlineToolbarPlugin;\r\nconst plugins = [inlineToolbarPlugin, linkPlugin];\r\n\r\n\r\nexport default function PostForm(props) {\r\n    const { selected = false, postId } = props;\r\n    const dispatch = useDispatch();\r\n    const [ editorState, setEditorState ] = useState(EditorState.createEmpty());\r\n\r\n    \r\n    const onSubmit = event => {\r\n        const text = JSON.stringify(convertToRaw(editorState.getCurrentContent()));\r\n\r\n        selected ? \r\n        dispatch(createComment(postId, { text })) :\r\n        dispatch(createPost({ text }));\r\n\r\n        setEditorState(EditorState.createEmpty());\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={event => onSubmit(event)}>\r\n\r\n        \r\n            <div className=\"form__group\">\r\n                <Editor \r\n                    editorState={editorState} \r\n                    onChange={state => setEditorState(state)} \r\n                    plugins={plugins} placeholder=\"type here...\" \r\n                />\r\n                <InlineToolbar>\r\n                    {\r\n                        (externalProps) => <Fragment>\r\n                            <BoldButton {...externalProps} />\r\n                            <ItalicButton {...externalProps} />\r\n                            <UnderlineButton {...externalProps} />\r\n                            <linkPlugin.LinkButton {...externalProps} />\r\n                        </Fragment>\r\n                    }\r\n                </InlineToolbar>\r\n            </div>\r\n\r\n            <div className=\"form__group\">\r\n                <input type='submit' className='btn btn--primary form__submit form__submit--right' value='Submit' />\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n}","import React, { Fragment, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { convertFromRaw } from \"draft-js\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\nimport DOMPurify from \"dompurify\";\r\nimport { Link } from \"react-router-dom\";\r\n// LOCAL\r\nimport formatDate from \"../../utils/formatDate\";\r\nimport { likePost, deletePost, deleteComment } from \"../../actions/post\";\r\nimport guestIcon from \"../../img/CodeLink_Guest_Icon.png\";\r\n\r\n\r\nexport default function PostItem(props) {\r\n    const {\r\n        selected = false,\r\n        comment = false,\r\n        postId = null,\r\n        post: {\r\n            _id,\r\n            text,\r\n            name,\r\n            avatar,\r\n            user,\r\n            likes,\r\n            comments,\r\n            date\r\n        }\r\n    } = props;\r\n    const convertedText = stateToHTML(convertFromRaw(JSON.parse(text)));\r\n    const { auth } = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [ userLiked, setUserLiked ] = useState(\r\n        likes && likes.some(({ user }) => user === auth.user._id)\r\n    );\r\n\r\n\r\n    const likeCurrentPost = () => {\r\n        dispatch(likePost(_id));\r\n        setUserLiked(!userLiked);\r\n    };\r\n\r\n\r\n    const deleteItem = () => {\r\n        comment ?\r\n        dispatch(deleteComment(postId, _id)) :\r\n        dispatch(deletePost(_id));\r\n    }\r\n\r\n\r\n    return (\r\n        <section className={`post ${selected ? `post--selected` : comment && `post--comment`}`}>\r\n\r\n\r\n            <header className=\"post__header\">\r\n\r\n                <Link className=\"post__user\" to={`/profile/${user}`}>\r\n                    {\r\n                        avatar.length > 0 ?\r\n                        <img src={avatar} alt=\"avatar\"/> :\r\n                        <img src={guestIcon} alt=\"Guest Avatar\" />\r\n                    }\r\n                    <p>\r\n                        {name}\r\n                    </p>\r\n                </Link>\r\n\r\n                <p className=\"post__date\">\r\n                    Posted on {formatDate(date, true)}\r\n                </p>\r\n                \r\n            </header>\r\n\r\n\r\n            <p className=\"post__text\" dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(convertedText)}}></p>\r\n\r\n\r\n            {\r\n                !selected &&\r\n                <aside className=\"post__actions\">\r\n\r\n                    {\r\n                        !comment &&\r\n                        <Fragment>\r\n\r\n                            <button onClick={likeCurrentPost} className={`btn btn--tertiary post__likes ${ userLiked && `post__likes--active` }`}>\r\n                                <i className=\"fas fa-thumbs-up\" />\r\n                                <span>\r\n                                    {\r\n                                        likes.length > 0 &&\r\n                                        <sup className=\"post__likes-count\">\r\n                                            {likes.length}\r\n                                        </sup>\r\n                                    }\r\n                                </span>\r\n                            </button>\r\n\r\n                            <Link to={`/posts/${_id}`} className=\"btn btn--tertiary post__discussion\">\r\n                                Comments\r\n                                <span>\r\n                                    {\r\n                                        comments.length > 0 &&\r\n                                        <sup className=\"post__comment-count\">\r\n                                            {comments.length}\r\n                                        </sup>\r\n                                    }\r\n                                </span>\r\n                            </Link>\r\n\r\n                        </Fragment>\r\n                    }\r\n\r\n                    {\r\n                        !auth.loading && user === auth.user._id &&\r\n                        <button onClick={() => deleteItem()} type=\"button\" className=\"btn btn--tertiary post__delete\">\r\n                            <i className=\"fas fa-times\" />\r\n                        </button>\r\n                    }\r\n\r\n                </aside>\r\n            }\r\n\r\n            \r\n        </section>\r\n    );\r\n}","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n// LOCAL\r\nimport { getPost } from \"../../actions/post\";\r\nimport Spinner from \"../utils/Spinner\";\r\nimport PostItem from \"../post/PostItem\";\r\nimport PostForm from \"../forms/PostForm\";\r\n\r\n\r\nexport default function Post(props) {\r\n    const { id } = props.match.params\r\n    const { post, loading } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getPost(id));\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    return loading || !post || post._id !== id ?\r\n    <Spinner /> :\r\n    <main className=\"discussion\">\r\n\r\n        <button className=\"btn btn--return\" onClick={() => {window.history.back()}}>\r\n            <i className=\"fas fa-arrow-left\"/>\r\n        </button>\r\n\r\n        <PostItem post={post} selected={true} />\r\n\r\n        <div className=\"line\"></div>\r\n\r\n        <PostForm postId={post._id} selected={true} />\r\n\r\n        <div className=\"discussion__comments\">\r\n            {\r\n                post.comments.map(comment => (\r\n                    <PostItem key={comment._id} comment={true} post={comment} postId={post._id} />\r\n                ))\r\n            }\r\n        </div>\r\n\r\n    </main>\r\n}","export default function formatDate(date, day = false) {\r\n    const intl = Intl.DateTimeFormat(\"en\",\r\n        {\r\n            month: \"long\",\r\n            [day && \"day\"]: \"numeric\",\r\n            year: \"numeric\"\r\n        }\r\n    );\r\n\r\n    return intl.format(new Date(date));\r\n}","import api from \"../utils/api\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n    ADD_COMMENT,\r\n    DELETE_COMMENT,\r\n    ADD_POST,\r\n    DELETE_POST,\r\n    GET_POST,\r\n    GET_POSTS,\r\n    POST_ERROR,\r\n    UPDATE_LIKES\r\n} from \"./types\";\r\n\r\n\r\nexport const getPost = postId => async dispatch => {\r\n\r\n    try {\r\n\r\n        const res = await api.get(`/posts/${postId}`);\r\n\r\n        dispatch({\r\n            type: GET_POST,\r\n            payload: res.data\r\n        });\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const getAllPosts = () => async dispatch => {\r\n\r\n    try {\r\n        const res = await api.get(\"/posts\");\r\n\r\n        dispatch({\r\n            type: GET_POSTS,\r\n            payload: res.data\r\n        });\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const likePost = (postId) => async dispatch => {\r\n\r\n    try {\r\n        const res = await api.put(`posts/like/${postId}`);\r\n\r\n        dispatch({\r\n            type: UPDATE_LIKES,\r\n            payload: {\r\n                likes: res.data,\r\n                postId\r\n            }\r\n        });\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const createComment = (postId, formData) => async dispatch => {\r\n\r\n    try {\r\n        const res = await api.post(`/posts/comment/${postId}`, formData);\r\n\r\n        console.log(postId, formData);\r\n\r\n        dispatch({\r\n            type: ADD_COMMENT,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(setAlert(\"Comment Created\", \"success\"));\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const deleteComment = (postId, commentId) => async dispatch => {\r\n\r\n    try {\r\n        const res = await api.delete(`/posts/comment/${postId}/${commentId}`);\r\n\r\n        dispatch({\r\n            type: DELETE_COMMENT,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(setAlert(\"Comment Deleted\", \"danger\"));\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const createPost = formData => async dispatch => {\r\n\r\n    try {\r\n        console.log(formData);\r\n        const res = await api.post(\"/posts\", formData);\r\n\r\n        dispatch({\r\n            type: ADD_POST,\r\n            payload: res.data\r\n        });\r\n\r\n        dispatch(setAlert(\"Post Created\", \"success\"));\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const deletePost = (postId) => async dispatch => {\r\n\r\n    try {\r\n        await api.delete(`/posts/${postId}`);\r\n\r\n        dispatch(setAlert(\"Post Deleted\", \"danger\"));\r\n\r\n        dispatch({\r\n            type: DELETE_POST,\r\n            payload: postId\r\n        });\r\n\r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n\r\n\t\terrors &&\r\n\t\terrors.forEach(error => \r\n\t\t\tdispatch(setAlert(error.msg, \"danger\"))\r\n        );\r\n\r\n        dispatch({\r\n            type: POST_ERROR,\r\n            payload: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status \r\n            }\r\n        });\r\n    }\r\n};"],"sourceRoot":""}